name: Deploy Ta Cukr√°rna to VPS

on:
  push:
    tags: ['v*']
  pull_request:
    branches: [main]

jobs:
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm config set update-notifier false
          npm ci

      - name: Run security scan
        run: npm run lint:secrets

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    # Lint can run in parallel with security
    # needs: security

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm config set update-notifier false
          npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run HTML validation
        run: npm run lint:html

      - name: Run Markdown lint
        run: npm run lint:md

      - name: Check formatting
        run: npm run format:check

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [security, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs-

      - name: Install dependencies
        run: |
          npm config set update-notifier false
          npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: ta-cukrarna-build
          path: |
            out/
            package.json
            package-lock.json
          retention-days: 1

  deploy:
    name: Deploy to VPS
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ta-cukrarna-build

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add server to known hosts
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
          echo "üîë Adding server to known hosts..."
          mkdir -p ~/.ssh
          ssh-keyscan -H $VPS_HOST >> ~/.ssh/known_hosts
          echo "Host keys added for $VPS_HOST"
          cat ~/.ssh/known_hosts

      - name: Deploy to VPS
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
        run: |
          echo "üöÄ Starting static deployment to VPS..."

          # Create backup and ensure public_html exists
          ssh $VPS_USER@$VPS_HOST '
            if [ -d "~/public_html" ]; then
              echo "üì¶ Creating backup..."
              cp -r ~/public_html ~/public_html-backup-$(date +%Y%m%d-%H%M%S) || true
            fi
            mkdir -p ~/public_html
          '

          # Deploy static files to user's public_html
          echo "üì§ Deploying static files to ~/public_html..."
          rsync -avz --delete \
            --exclude-from='.rsyncignore' \
            -e "ssh" \
            ./out/ \
            $VPS_USER@$VPS_HOST:~/public_html/

          # Set proper permissions (no sudo needed)
          ssh $VPS_USER@$VPS_HOST '
            echo "Setting proper file permissions..."
            chmod -R 755 ~/public_html
            find ~/public_html -type f -exec chmod 644 {} \;
            echo "Static deployment completed successfully!"
          '

          echo "üéâ Static deployment finished!"

  verify:
    name: Verify Deployment
    needs: deploy
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for deployment stabilization
        run: |
          echo "‚è≥ Waiting 30 seconds for deployment to stabilize..."
          sleep 30

      - name: Run deployment verification
        run: ./scripts/verify-deployment.sh

  cleanup:
    name: Cleanup
    needs: [deploy, verify]
    runs-on: ubuntu-latest
    if: always() && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Cleanup SSH agent
        run: |
          # Explicitly kill SSH agent to prevent cleanup errors
          if [ -n "$SSH_AGENT_PID" ]; then
            kill $SSH_AGENT_PID || true
          fi
