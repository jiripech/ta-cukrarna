name: Deploy Ta CukrÃ¡rna to VPS

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: ta-cukrarna-build
          path: |
            .next/
            public/
            package.json
            package-lock.json
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ta-cukrarna-build

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add server to known hosts
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
          echo "ðŸ”‘ Adding server to known hosts..."
          mkdir -p ~/.ssh
          ssh-keyscan -H $VPS_HOST >> ~/.ssh/known_hosts
          echo "Host keys added for $VPS_HOST"
          cat ~/.ssh/known_hosts

      - name: Deploy to VPS
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_PATH: ${{ secrets.VPS_PATH }}
        run: |
          echo "ðŸš€ Starting static deployment to VPS..."

          # Create backup of current deployment
          ssh $VPS_USER@$VPS_HOST '
            if [ -d "'"$VPS_PATH"'" ]; then
              echo "ðŸ“¦ Creating backup..."
              sudo cp -r "'"$VPS_PATH"'" "'"$VPS_PATH"'-backup-$(date +%Y%m%d-%H%M%S)" || true
            fi
            sudo mkdir -p "'"$VPS_PATH"'"
          '

          # Deploy static files directly to Apache DocumentRoot
          echo "ðŸ“¤ Deploying static files with rsync..."
          rsync -avz --delete \
            --exclude-from='.rsyncignore' \
            -e "ssh" \
            ./out/ \
            $VPS_USER@$VPS_HOST:$VPS_PATH/

          # Set proper permissions for Apache
          ssh $VPS_USER@$VPS_HOST '
            echo "Setting proper file permissions..."
            sudo chown -R www-data:www-data "'"$VPS_PATH"'"
            sudo find "'"$VPS_PATH"'" -type f -exec chmod 644 {} \;
            sudo find "'"$VPS_PATH"'" -type d -exec chmod 755 {} \;
            echo "Reloading Apache..."
            sudo systemctl reload apache2 || echo "Apache reload failed - manual restart needed"
            echo "Static deployment completed successfully!"
          '

          echo "ðŸŽ‰ Static deployment finished!"

      - name: Cleanup SSH agent
        if: always()
        run: |
          # Explicitly kill SSH agent to prevent cleanup errors
          if [ -n "$SSH_AGENT_PID" ]; then
            kill $SSH_AGENT_PID || true
          fi
